import React, { useEffect } from 'react';
import { Box, Typography, Divider } from '@mui/material';
import jsPDF from 'jspdf';
import { sendToPrinter } from './printUtils'; // Adjust the path as needed

const XReport = ({ reportData }) => {
  // Function to format lines with dots
  const formatLine = (label, value, totalWidth = 32) => {
    const labelLength = label.length;
    const valueLength = value.toString().length;
    const dotsLength = totalWidth - labelLength - valueLength;
    const dots = '.'.repeat(dotsLength > 0 ? dotsLength : 0);
    return `${label}${dots}${value}`;
  };

  // Extracting values from reportData
  const taxes = reportData.taxes || 0;
  const tax1Charges = taxes / 2;
  const discounts = reportData.discounts || 0;
  const rounded = reportData.rounded || 0;
  const voidedLines = reportData.voidedLines || 0;
  const customerOrders = reportData.customerOrders || {
    placed: 0,
    edited: 0,
    depositCollected: 0,
    canceled: 0,
    voidedLines: 0,
    charges: 0,
    depositRefunded: 0,
    depositRedeemed: 0,
  };
  const statistics = {
    sales: reportData.salesCount || 0,
    customerSales: reportData.customerSalesCount || 0,
    voidedSales: reportData.voidedSalesCount || 0,
    openDrawer: reportData.openDrawerCount || 0,
  };

  // Function to generate and print the PDF
  const generateAndPrintPDF = async () => {
    try {
      const reportId = `XREPORT-${Date.now()}`; // Unique ID for the report
      console.log(`Generating X-Report PDF for report: ${reportId}`);

      // Calculate PDF height based on content
      const lineHeight = 5; // mm per line
      const totalLines = 40; // Approximate number of lines in the report
      const pdfHeight = totalLines * lineHeight + 20; // Add padding

      // Create PDF with jsPDF
      const doc = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: [80, pdfHeight], // 80mm width for receipt printer
      });

      let y = 10; // Starting Y position

      // Set font to mimic VT323 monospace
      doc.setFont("courier");
      doc.setFontSize(12);

      // Header
      doc.text("X-Report", 40, y, { align: "center" });
      y += 5;
      doc.setLineWidth(0.5);
      doc.line(5, y, 75, y); // Divider
      y += 5;

      // Store and Employee Info
      doc.setFontSize(10);
      doc.text(formatLine("Date", reportData.date), 5, y);
      y += lineHeight;
      doc.text(formatLine("Generated by", reportData.employeeName), 5, y);
      y += lineHeight;
      doc.text(formatLine("Time", reportData.time), 5, y);
      y += lineHeight;
      doc.text(formatLine("Register", reportData.register), 5, y);
      y += lineHeight;
      doc.text(formatLine("Start date", reportData.startDate), 5, y);
      y += lineHeight;
      doc.text(formatLine("End Date", reportData.endDate), 5, y);
      y += lineHeight;
      doc.text(formatLine("Start time", reportData.startTime), 5, y);
      y += lineHeight;
      doc.text(formatLine("End time", reportData.endTime), 5, y);
      y += lineHeight;
      doc.line(5, y, 75, y); // Divider
      y += 5;

      // Total Amounts
      doc.setFontSize(12);
      doc.text("Total amounts", 5, y);
      y += lineHeight;
      doc.setFontSize(10);
      doc.text(formatLine("Sales:", reportData.sales.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Gift cards:", (0).toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Cashed out gift card amount:", (0).toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Returns:", `(${reportData.returns.toFixed(2)})`), 5, y);
      y += lineHeight;
      doc.text(formatLine("Taxes:", taxes.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Tax1 charges:", tax1Charges.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Discounts:", discounts.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Rounded:", rounded.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Voided lines:", voidedLines.toFixed(2)), 5, y);
      y += lineHeight;
      doc.line(5, y, 75, y); // Divider
      y += 5;

      // Customer Orders
      doc.setFontSize(12);
      doc.text("Customer orders", 5, y);
      y += lineHeight;
      doc.setFontSize(10);
      doc.text(formatLine("Placed:", customerOrders.placed.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Edited:", customerOrders.edited.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Deposit collected:", customerOrders.depositCollected.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Canceled:", customerOrders.canceled.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Voided lines:", customerOrders.voidedLines.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Charges:", customerOrders.charges.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Deposit refunded:", customerOrders.depositRefunded.toFixed(2)), 5, y);
      y += lineHeight;
      doc.text(formatLine("Deposit redeemed:", customerOrders.depositRedeemed.toFixed(2)), 5, y);
      y += lineHeight;
      doc.line(5, y, 75, y); // Divider
      y += 5;

      // Statistics
      doc.setFontSize(12);
      doc.text("Statistics", 5, y);
      y += lineHeight;
      doc.setFontSize(10);
      doc.text(formatLine("Sales:", statistics.sales), 5, y);
      y += lineHeight;
      doc.text(formatLine("Customer sales:", statistics.customerSales), 5, y);
      y += lineHeight;
      doc.text(formatLine("Voided sales:", statistics.voidedSales), 5, y);
      y += lineHeight;
      doc.text(formatLine("Open drawer:", statistics.openDrawer), 5, y);

      // Generate PDF as a data URI
      const pdfDataUri = doc.output("datauristring");
      console.log(`PDF generated: ${pdfDataUri.substring(0, 100)}...`);

      // Send to printer
      console.log(`Sending X-Report to printer for report: ${reportId}`);
      const printResult = await sendToPrinter(pdfDataUri, reportId);

      console.log(`X-Report printing completed for report: ${reportId}`);
      return printResult;
    } catch (error) {
      console.error(`Error generating and printing X-Report:`, error);
      alert(`Failed to print X-Report. Error: ${error.message}`);
      return null;
    }
  };

  // Automatically print the report when the component mounts
  useEffect(() => {
    generateAndPrintPDF();
  }, [reportData]); // Re-run if reportData changes

  // Since we're printing directly, we don't need to render the report on the screen
  return null;

  // If you want to render the report on the screen as well, you can uncomment the following:
  /*
  return (
    <Box
      sx={{
        fontFamily: '"VT323", monospace',
        fontSize: '10px',
        lineHeight: '1.0',
        color: '#000',
      }}
    >
      <Typography
        variant="h6"
        align="center"
        sx={{
          fontFamily: '"VT323", monospace',
          fontWeight: 'normal',
          fontSize: '12px',
          marginBottom: '1px',
        }}
      >
        X-Report
      </Typography>
      <Divider sx={{ borderColor: '#000', margin: '1px 0' }} />

      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Date', reportData.date)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Generated by', reportData.employeeName)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Time', reportData.time)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Register', reportData.register)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Start date', reportData.startDate)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('End Date', reportData.endDate)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Start time', reportData.startTime)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('End time', reportData.endTime)}
      </Typography>
      <Divider sx={{ borderColor: '#000', margin: '1px 0' }} />

      <Typography
        sx={{
          fontFamily: '"VT323", monospace',
          fontWeight: 'normal',
          marginTop: '1px',
          whiteSpace: 'nowrap',
        }}
      >
        Total amounts
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Sales:', reportData.sales.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Gift cards:', (0).toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Cashed out gift card amount:', (0).toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Returns:', `(${reportData.returns.toFixed(2)})`)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Taxes:', taxes.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Tax1 charges:', tax1Charges.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Discounts:', discounts.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Rounded:', rounded.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Voided lines:', voidedLines.toFixed(2))}
      </Typography>
      <Divider sx={{ borderColor: '#000', margin: '1px 0' }} />

      <Typography
        sx={{
          fontFamily: '"VT323", monospace',
          fontWeight: 'normal',
          marginTop: '1px',
          whiteSpace: 'nowrap',
        }}
      >
        Customer orders
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Placed:', customerOrders.placed.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Edited:', customerOrders.edited.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Deposit collected:', customerOrders.depositCollected.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Canceled:', customerOrders.canceled.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Voided lines:', customerOrders.voidedLines.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Charges:', customerOrders.charges.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Deposit refunded:', customerOrders.depositRefunded.toFixed(2))}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Deposit redeemed:', customerOrders.depositRedeemed.toFixed(2))}
      </Typography>
      <Divider sx={{ borderColor: '#000', margin: '1px 0' }} />

      <Typography
        sx={{
          fontFamily: '"VT323", monospace',
          fontWeight: 'normal',
          marginTop: '1px',
          whiteSpace: 'nowrap',
        }}
      >
        Statistics
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Sales:', statistics.sales)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Customer sales:', statistics.customerSales)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Voided sales:', statistics.voidedSales)}
      </Typography>
      <Typography sx={{ fontFamily: '"VT323", monospace', whiteSpace: 'nowrap' }}>
        {formatLine('Open drawer:', statistics.openDrawer)}
      </Typography>
    </Box>
  );
  */
};

export default XReport;